{"ast":null,"code":"import _classCallCheck from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ibtihel/Desktop/berexia/reactapp/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nimport { Checkbox, CheckboxGroup } from 'react-checkbox-group';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories(); // 2) setup the diagram model\n\nvar model = new SRD.DiagramModel(); // 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n// 5) link the ports\n//let link1 = port1.link(port2);\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n// 7) load model into engine\n\nengine.setDiagramModel(model);\nconsole.log(model);\nconsole.log(engine);\nvar str = \"aze,dazad,dscwxc,fdsfsd\";\nvar listSQL = ['and', 'or', 'where', 'not', 'like', '>', '<', '<>', '=', '<=', '>=', 'AVG', 'MIN', 'MAX', '(', ')', '+', '-', '*', '/'];\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.path = \"EA_result_1351.xlsx\";\n\n    _this.fileInput = function (e) {\n      var file = e.target.files[0];\n      var newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n      newNode.addOutPort(\"out\");\n      model.addNode(newNode);\n      console.log(newNode.name);\n\n      _this.forceUpdate();\n      /*  this.componentDidMount()\n      {\n        fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n          res.json()\n        }).then(res=>{\n          this.setState({\n            columns: res\n          }).catch(error=>{\n            console.log(error)\n          })\n        })    \n      }\n      */\n\n    };\n\n    _this.addSelect = function () {\n      var newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n      newNode1.addOutPort(\"out\");\n      newNode1.addInPort(\"in\");\n      model.addNode(newNode1);\n      console.log(newNode1);\n\n      _this.forceUpdate();\n\n      console.log(model); //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n\n      console.log(\"hiiii\");\n      console.log(model.getSelectedItems());\n      newNode1.addListener({\n        selectionChanged: function selectionChanged() {\n          document.getElementById('configure').style.display = 'block';\n        }\n      });\n    };\n\n    _this.addCombine = function () {\n      var newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in1\");\n      newNode.addInPort(\"in2\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n\n      console.log(model);\n    };\n\n    _this.addGroupBy = function () {\n      var newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n    };\n\n    _this.getColumns = function () {\n      var newstr = str.split(',');\n      return newstr;\n    };\n\n    _this.addSQL = function () {\n      return function (e) {\n        _this.setState({\n          sqlString: _this.state.sqlString\n        });\n\n        console.log(_this.state.sqlString);\n      };\n    };\n\n    _this.onOpenModal = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.onCloseModal = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.columnNamesChanged = function (newIteS) {\n      _this.setState({// fruits: newFruits\n      });\n    };\n\n    _this.state = {\n      sqlString: 'select ',\n      open: 'false'\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      axios.get(\"http://localhost:9000/test3/{path}\").then(function (res) {\n        var s = res.data;\n        console.log(s);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        open: open,\n        onClose: this.onCloseModal,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Simple centered modal\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(CheckboxGroup, {\n        checkboxDepth: 2 // This is needed to optimize the checkbox group\n        ,\n        name: \"fruits\",\n        value: this.state.columnNames,\n        onChange: this.columnNamesChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, this.getColumns().map(function (item, i) {\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }), \" \", item);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, listSQL.map(function (item, i) {\n        return React.createElement(\"button\", {\n          onClick: this.addSQL,\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, item);\n      }))), React.createElement(\"button\", {\n        id: \"configure\",\n        hidden: \"hidden\",\n        onClick: this.onOpenModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Configure\"), React.createElement(\"input\", {\n        type: \"file\",\n        label: \"upload\",\n        onChange: this.fileInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Select\"), React.createElement(\"button\", {\n        onClick: this.addCombine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Combine\"), React.createElement(\"button\", {\n        onClick: this.addGroupBy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"GroupBy\"), React.createElement(SRD.DiagramWidget, {\n        diagramEngine: engine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 218\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/ibtihel/Desktop/berexia/reactapp/src/index.js"],"names":["React","Component","ReactDOM","SRD","Modal","axios","Checkbox","CheckboxGroup","require","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setDiagramModel","console","log","str","listSQL","App","props","path","fileInput","e","file","target","files","newNode","DefaultNodeModel","name","addOutPort","addNode","forceUpdate","addSelect","newNode1","addInPort","getSelectedItems","addListener","selectionChanged","document","getElementById","style","display","addCombine","addGroupBy","getColumns","newstr","split","addSQL","setState","sqlString","state","onOpenModal","open","onCloseModal","columnNamesChanged","newIteS","get","then","res","s","data","columnNames","map","item","i","rootElement","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nimport {Checkbox, CheckboxGroup} from 'react-checkbox-group';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n// 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n\n// 5) link the ports\n//let link1 = port1.link(port2);\n\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\nconsole.log(model);\nconsole.log(engine);\n\nconst str=\"aze,dazad,dscwxc,fdsfsd\"\nconst listSQL=['and','or','where','not','like','>','<','<>','=','<=','>=','AVG','MIN','MAX','(',')','+','-','*','/']\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {sqlString:'select ',open:'false' };\n  }\n\n path=\"EA_result_1351.xlsx\";\n\n\n  fileInput = e => {\n    const file = e.target.files[0];\n    const newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n    newNode.addOutPort(\"out\");\n    model.addNode(newNode);\n    console.log(newNode.name);\n    this.forceUpdate();\n\n    \n\n\n  \n    /*  this.componentDidMount()\n    {\n      fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n        res.json()\n      }).then(res=>{\n        this.setState({\n          columns: res\n        }).catch(error=>{\n          console.log(error)\n        })\n      })    \n    }\n  */\n  \n  };\n\n  \n  \n  componentDidMount() {\n    axios.get(`http://localhost:9000/test3/{path}`)\n      .then(res => {\n        const s = res.data;\nconsole.log(s);      })\n  }\n\n\n\n    \n\n  addSelect = () => {\n    const newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n    newNode1.addOutPort(\"out\");\n    newNode1.addInPort(\"in\");\n    model.addNode(newNode1);\n    console.log(newNode1)\n    this.forceUpdate(); \n     console.log(model);\n\n    //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n\n  \n    console.log(\"hiiii\");\n    console.log(model.getSelectedItems());\n\n\n\n\n\n    newNode1.addListener({\n      selectionChanged: () => {\n        document.getElementById('configure').style.display = 'block';\n      }\n    });\n  };\n\n  addCombine = () => {\n    const newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in1\");\n    newNode.addInPort(\"in2\");\n    model.addNode(newNode);\n    this.forceUpdate();\n    console.log(model);\n  };\n  addGroupBy = () => {\n    const newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in\");\n    model.addNode(newNode);\n\n\n    \n    this.forceUpdate();\n  };\n\n  // state = {\n  //   open: false,\n  // };\n\n\n  getColumns=()=> {\n    var newstr = str.split(',');\n    return newstr\n  }\n\n  addSQL = () => e => {\n    this.setState({sqlString: this.state.sqlString})\n    console.log(this.state.sqlString)\n}\n\n\n\n\n\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n   \n\n  columnNamesChanged = (newIteS) => {\n    this.setState({\n      // fruits: newFruits\n    });\n  }\n\n\n  render() {\n    const { open } = this.state;\n    return (\n      <div className=\"App\">\n        <Modal open={open} onClose={this.onCloseModal} center>\n          <h2>Simple centered modal</h2>\n           \n           \n<div>\n  <CheckboxGroup\n    checkboxDepth={2} // This is needed to optimize the checkbox group\n    name=\"fruits\"\n    value={this.state.columnNames}\n    onChange={this.columnNamesChanged}>\n {this.getColumns().map(function(item, i){\n   return <label><Checkbox value={item}/> {item}</label>})}\n  </CheckboxGroup>\n  </div>\n\n  <div>\n    {\n listSQL.map(function(item,i){\nreturn <button  onClick={this.addSQL}   value={item}>{item}</button>\n\n  })}\n   \n  </div>\n\n          \n\n        </Modal>        \n       \n        <button id=\"configure\" hidden=\"hidden\" onClick={this.onOpenModal} >Configure</button>\n        <input type=\"file\" label=\"upload\" onChange={this.fileInput} />\n        <button onClick={this.addSelect}>Select</button>\n        <button onClick={this.addCombine}>Combine</button>\n        <button onClick={this.addGroupBy}>GroupBy</button>\n\n        <SRD.DiagramWidget diagramEngine={engine} />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}