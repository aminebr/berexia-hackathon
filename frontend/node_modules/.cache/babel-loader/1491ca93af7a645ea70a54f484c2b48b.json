{"ast":null,"code":"import _toConsumableArray from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ibtihel/Desktop/berexia/reactapp/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nimport { Checkbox, CheckboxGroup } from 'react-checkbox-group';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories(); // 2) setup the diagram model\n\nvar model = new SRD.DiagramModel(); // 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n// 5) link the ports\n//let link1 = port1.link(port2);\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n// 7) load model into engine\n\nengine.setDiagramModel(model); // console.log(model);\n// console.log(engine);\n\nvar str = \"aze,dazad,dscwxc,fdsfsd\";\nvar listSQL = ['and', 'or', 'where', 'not', 'like', '>', '<', '<>', '=', '<=', '>=', 'AVG', 'MIN', 'MAX', '(', ')', '+', '-', '*', '/'];\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.path = \"EA_result_1351.xlsx\";\n\n    _this.fileInput = function (e) {\n      var file = e.target.files[0];\n      var newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n      newNode.addOutPort(\"out\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n      /*  this.componentDidMount()\n      {\n        fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n          res.json()\n        }).then(res=>{\n          this.setState({\n            columns: res\n          }).catch(error=>{\n            console.log(error)\n          })\n        })    \n      }\n      */\n\n    };\n\n    _this.addSelect = function () {\n      var newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n      newNode1.addOutPort(\"out\");\n      newNode1.addInPort(\"in\");\n      model.addNode(newNode1);\n      console.log(newNode1);\n\n      _this.forceUpdate(); //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n      // console.log(\"hiiii\");\n      // console.log(model.getSelectedItems());\n\n\n      model.addListener({\n        linksUpdated: function linksUpdated(e) {\n          console.log(\"udated!!\");\n          console.log(e);\n\n          if (e.link.sourcePort != null && e.link.targetPort != null) {\n            console.log(\"*************************\");\n\n            if (e.link.targetPort.parent.id != e.link.sourcePort.parent.id) {\n              console.log(\"dsfsdf\");\n\n              _this.setState({\n                listNodesId: [e.link.sourcePort.parent.id, e.link.targetPort.parent.id]\n              });\n            }\n          }\n        }\n      });\n      newNode1.addListener({\n        selectionChanged: function selectionChanged() {\n          document.getElementById('configure').style.display = 'block';\n        }\n      });\n    };\n\n    _this.addSQL = function (item) {\n      console.log(item);\n\n      _this.setState({\n        sqlString: _this.state.sqlString + ' ' + item.item\n      });\n\n      console.log(_this.state.sqlString);\n    };\n\n    _this.addCombine = function () {\n      var newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in1\");\n      newNode.addInPort(\"in2\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n\n      console.log(model);\n    };\n\n    _this.addGroupBy = function () {\n      var newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n    };\n\n    _this.getColumns = function () {\n      var newstr = str.split(',');\n      return newstr;\n    };\n\n    _this.onOpenModal = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.onCloseModal = function () {\n      _this.setState({\n        finalSQL: _this.state.firstSQL + _this.state.sqlString,\n        finalRqt: _toConsumableArray(_this.state.listNodesId).concat([_this.state.finalSQL]),\n        open: false\n      });\n    };\n\n    _this.handleChangeSQL = function (event) {\n      _this.setState({\n        inputSQl: event.target.value\n      });\n    };\n\n    _this._handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        _this.setState({\n          sqlString: _this.state.sqlString + ' ' + _this.state.inputSQl,\n          inputSQl: \"\"\n        });\n      }\n    };\n\n    _this.columnNamesChanged = function (newItems) {\n      _this.setState({\n        firstSQL: \"select \" + newItems.toString() + \" from \" + \"filename \" // firstSQL:this.state.firstSQL+','+newItems\n        // fruits: newFruits\n\n      });\n    };\n\n    _this.state = {\n      sqlString: '',\n      open: false,\n      firstSQL: \"select \",\n      inputSQl: \"\",\n      listNodesId: [],\n      finalRqt: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      axios.get(\"http://localhost:9000/test3/{path}\").then(function (res) {\n        var s = res.data; // console.log(s);   \n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var open = this.state.open;\n      var sentenceSQL = this.state.sqlString;\n      var arrayop = listSQL.concat(_toConsumableArray(this.getColumns()));\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        open: open,\n        onClose: this.onCloseModal,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Simple centered modal\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(CheckboxGroup, {\n        checkboxDepth: 2 // This is needed to optimize the checkbox group\n        ,\n        name: \"fruits\",\n        value: this.state.columnNames,\n        onChange: this.columnNamesChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, this.getColumns().map(function (item, i) {\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }), \" \", item);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, arrayop.map(function (item) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.addSQL({\n              item: item\n            });\n          },\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.inputSQl,\n        onChange: this.handleChangeSQL.bind(this),\n        onKeyPress: this._handleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, sentenceSQL)), React.createElement(\"button\", {\n        id: \"configure\",\n        hidden: \"hidden\",\n        onClick: this.onOpenModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"Configure\"), React.createElement(\"input\", {\n        type: \"file\",\n        label: \"upload\",\n        onChange: this.fileInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Select\"), React.createElement(\"button\", {\n        onClick: this.addCombine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Combine\"), React.createElement(\"button\", {\n        onClick: this.addGroupBy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"GroupBy\"), React.createElement(\"button\", {\n        onClick: this.Run,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Run\"), React.createElement(SRD.DiagramWidget, {\n        diagramEngine: engine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 264\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/ibtihel/Desktop/berexia/reactapp/src/index.js"],"names":["React","Component","ReactDOM","SRD","Modal","axios","Checkbox","CheckboxGroup","require","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setDiagramModel","str","listSQL","App","props","path","fileInput","e","file","target","files","newNode","DefaultNodeModel","name","addOutPort","addNode","forceUpdate","addSelect","newNode1","addInPort","console","log","addListener","linksUpdated","link","sourcePort","targetPort","parent","id","setState","listNodesId","selectionChanged","document","getElementById","style","display","addSQL","item","sqlString","state","addCombine","addGroupBy","getColumns","newstr","split","onOpenModal","open","onCloseModal","finalSQL","firstSQL","finalRqt","handleChangeSQL","event","inputSQl","value","_handleKeyPress","key","columnNamesChanged","newItems","toString","get","then","res","s","data","sentenceSQL","arrayop","columnNames","map","i","bind","Run","rootElement","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nimport {Checkbox, CheckboxGroup} from 'react-checkbox-group';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n// 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n\n// 5) link the ports\n//let link1 = port1.link(port2);\n\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\n// console.log(model);\n// console.log(engine);\n\nconst str=\"aze,dazad,dscwxc,fdsfsd\"\nconst listSQL=['and','or','where','not','like','>','<','<>','=','<=','>=','AVG','MIN','MAX','(',')','+','-','*','/']\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {sqlString:''\n    ,open:false,\n    firstSQL:\"select \"\n    ,inputSQl:\"\"\n    ,listNodesId:[],\n  finalRqt:[] };\n\n  }\n\n path=\"EA_result_1351.xlsx\";\n\n\n  fileInput = e => {\n    const file = e.target.files[0];\n    const newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n    newNode.addOutPort(\"out\");\n    model.addNode(newNode);\n\n    this.forceUpdate();\n\n    \n\n\n  \n    /*  this.componentDidMount()\n    {\n      fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n        res.json()\n      }).then(res=>{\n        this.setState({\n          columns: res\n        }).catch(error=>{\n          console.log(error)\n        })\n      })    \n    }\n  */\n  \n  };\n\n  \n  \n  componentDidMount() {\n    axios.get(`http://localhost:9000/test3/{path}`)\n      .then(res => {\n        const s = res.data;\n// console.log(s);   \n   })\n  }\n\n\n\n    \n\n  addSelect = () => {\n    const newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n    newNode1.addOutPort(\"out\");\n    newNode1.addInPort(\"in\");\n    model.addNode(newNode1);\n    console.log(newNode1)\n    this.forceUpdate(); \n\n\n    //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n\n  \n    // console.log(\"hiiii\");\n    // console.log(model.getSelectedItems());\n\n\n\n    model.addListener({\n      linksUpdated: e => {  \n        console.log(\"udated!!\") \n        console.log(e)\n        if( (e.link.sourcePort!=null)&&(e.link.targetPort!=null)){\n        console.log(\"*************************\")\n        if(e.link.targetPort.parent.id!=e.link.sourcePort.parent.id)\n    {\n      console.log(\"dsfsdf\")\n      this.setState({listNodesId:[e.link.sourcePort.parent.id,e.link.targetPort.parent.id]})   }}\n  }\n\n  \n\n    \n      \n  });\n\n    newNode1.addListener({\n      selectionChanged: () => {\n        document.getElementById('configure').style.display = 'block';\n      }\n    });\n\n\n\n  };\n\n  addSQL = (item) => {\n    console.log(item)\n     this.setState({sqlString:  this.state.sqlString +' '+ item.item})\n    console.log(this.state.sqlString)\n  };\n\n\n  addCombine = () => {\n    const newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in1\");\n    newNode.addInPort(\"in2\");\n    model.addNode(newNode);\n    this.forceUpdate();\n    console.log(model);\n  };\n  addGroupBy = () => {\n    const newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in\");\n    model.addNode(newNode);\n\n    this.forceUpdate();\n  };\n\n  // state = {\n  //   open: false,\n  // };\n\n\n  getColumns=()=> {\n    var newstr = str.split(',');\n    return newstr\n  }\n\n\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({finalSQL:this.state.firstSQL+this.state.sqlString, finalRqt:[...this.state.listNodesId,this.state.finalSQL], open: false });\n  };\n\n  handleChangeSQL=(event)=>{\n    \n    this.setState({inputSQl:event.target.value})\n\n  }\n\n  _handleKeyPress = (e) => {\n    \n    if (e.key === 'Enter') {\n      this.setState({sqlString:this.state.sqlString+' '+this.state.inputSQl,inputSQl:\"\"})\n    }\n  }\n   \n\n  columnNamesChanged = (newItems) => {\n    \n\n    this.setState({\n      firstSQL: \"select \"+ newItems.toString()+\" from \"  + \"filename \"\n      // firstSQL:this.state.firstSQL+','+newItems\n      // fruits: newFruits\n    });\n  }\n\n\n  render() {\n    const { open } = this.state;\n    var sentenceSQL = this.state.sqlString\n    var arrayop = [...listSQL, ...this.getColumns()]\n    return (\n      <div className=\"App\">\n        <Modal open={open} onClose={this.onCloseModal} center>\n          <h2>Simple centered modal</h2>\n           \n           \n<div>\n  <CheckboxGroup\n    checkboxDepth={2} // This is needed to optimize the checkbox group\n    name=\"fruits\"\n    value={this.state.columnNames}\n    onChange={this.columnNamesChanged}>\n {this.getColumns().map(function(item, i){\n   return <label><Checkbox value={item}/> {item}</label>})}\n  </CheckboxGroup>\n  </div>\n\n\n  <div>\n    {\n arrayop.map((item)=>(\n     <button  onClick={() => this.addSQL({item})} value={item}>{item}</button>\n  ))\n}\n  <input type='text' value={this.state.inputSQl} onChange={this.handleChangeSQL.bind(this)}\n  onKeyPress={this._handleKeyPress} />\n  </div>\n      <div>\n  {sentenceSQL}\n     </div>\n          \n\n        </Modal>        \n        <button id=\"configure\" hidden=\"hidden\" onClick={this.onOpenModal} >Configure</button>\n        <input type=\"file\" label=\"upload\" onChange={this.fileInput} />\n        <button onClick={this.addSelect}>Select</button>\n        <button onClick={this.addCombine}>Combine</button>\n        <button onClick={this.addGroupBy}>GroupBy</button>\n        <button onClick={this.Run}>Run</button>\n\n        <SRD.DiagramWidget diagramEngine={engine} />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}