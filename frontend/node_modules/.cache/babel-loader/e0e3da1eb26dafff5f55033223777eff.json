{"ast":null,"code":"import _toConsumableArray from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ibtihel/Desktop/berexia/reactapp/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nimport { Checkbox, CheckboxGroup } from 'react-checkbox-group';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories(); // 2) setup the diagram model\n\nvar model = new SRD.DiagramModel(); // 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n// 5) link the ports\n//let link1 = port1.link(port2);\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n// 7) load model into engine\n\nengine.setDiagramModel(model); // console.log(model);\n// console.log(engine);\n\nvar str = \"aze,dazad,dscwxc,fdsfsd\";\nvar listSQL = ['and', 'or', 'where', 'not', 'like', '>', '<', '<>', '=', '<=', '>=', 'AVG', 'MIN', 'MAX', '(', ')', '+', '-', '*', '/'];\nvar listGroupBy = ['AVG', 'MIN', 'MAX', 'FIRST', ','];\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.path = \"EA_result_1351.xlsx\";\n\n    _this.fileInput = function (e) {\n      var file = e.target.files[0];\n      var newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n      newNode.addOutPort(\"out\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n      /*  this.componentDidMount()\n      {\n        fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n          res.json()\n        }).then(res=>{\n          this.setState({\n            columns: res\n          }).catch(error=>{\n            console.log(error)\n          })\n        })    \n      }\n      */\n\n    };\n\n    _this.addSelect = function () {\n      var newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n      newNode1.addOutPort(\"out\");\n      newNode1.addInPort(\"in\");\n      model.addNode(newNode1);\n      console.log(newNode1);\n\n      _this.forceUpdate(); //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n      // console.log(\"hiiii\");\n      // console.log(model.getSelectedItems());\n      //   model.addListener({\n      //     linksUpdated: e => {  \n      //       console.log(\"udated!!\") \n      //       console.log(e)\n      //       if( (e.link.sourcePort!=null)&&(e.link.targetPort!=null)){\n      //       console.log(\"*************************\")\n      //       if(e.link.targetPort.parent.id!=e.link.sourcePort.parent.id)\n      //   {\n      //     console.log(\"dsfsdf\")\n      //     this.setState({listNodesId:[e.link.sourcePort.parent.id,e.link.targetPort.parent.id]})   }}\n      // }\n      // });\n\n\n      newNode1.addListener({\n        selectionChanged: function selectionChanged() {\n          document.getElementById('configureGroupBy').style.display = 'none';\n          document.getElementById('configureSelect').style.display = 'block';\n        }\n      });\n    };\n\n    _this.addSQL = function (item) {\n      console.log(item);\n\n      _this.setState({\n        sqlString: _this.state.sqlString + ' ' + item.item\n      });\n\n      console.log(_this.state.sqlString);\n    };\n\n    _this.addCombine = function () {\n      var newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in1\");\n      newNode.addInPort(\"in2\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n\n      console.log(model);\n    };\n\n    _this.addGroupBy = function () {\n      var newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n\n      newNode.addListener({\n        selectionChanged: function selectionChanged() {\n          document.getElementById('configureSelect').style.display = 'none';\n          document.getElementById('configureGroupBy').style.display = 'block';\n        }\n      });\n    };\n\n    _this.getColumns = function () {\n      var newstr = str.split(',');\n      return newstr;\n    };\n\n    _this.onOpenGroupByModal = function () {\n      _this.setState({\n        openGroupBy: true\n      });\n    };\n\n    _this.onOpenSelectModal = function () {\n      _this.setState({\n        openSelect: true\n      });\n    };\n\n    _this.onOpenCombineModal = function () {\n      _this.setState({\n        opencombine: true\n      });\n    };\n\n    _this.onCloseSelectModal = function () {\n      Object.keys(model.links).map(function (item, i) {\n        return _this.setState({\n          listNodesId: [model.links[item].sourcePort.parent.id, model.links[item].targetPort.parent.id]\n        });\n      });\n\n      _this.setState({\n        finalSQL: _this.state.firstSQL + _this.state.sqlString\n      });\n\n      if (_this.state.finalSQL) {\n        _this.setState({\n          finalRqt: _toConsumableArray(_this.state.finalRqt).concat([_toConsumableArray(_this.state.listNodesId).concat([_this.state.finalSQL])])\n        });\n\n        _this.setState({\n          openSelect: false\n        });\n\n        _this.setState({\n          finalSQL: \"\",\n          sqlString: \"\"\n        });\n      }\n    };\n\n    _this.onCloseGroupBy = function () {\n      Object.keys(model.links).map(function (item, i) {\n        return _this.setState({\n          listNodesId: [model.links[item].sourcePort.parent.id, model.links[item].targetPort.parent.id]\n        });\n      });\n\n      _this.setState({\n        lastGroupByRqt: _this.state.firstSQL + _this.state.sqlString + _this.state.lastgroupby\n      });\n\n      if (_this.state.lastGroupByRqt) {\n        _this.setState({\n          finalRqt: [_this.state.finalRqt, _toConsumableArray(_this.state.listNodesId).concat([_this.state.lastGroupByRqt])]\n        });\n\n        _this.setState({\n          openGroupBy: false\n        });\n\n        _this.setState({\n          firstSQL: \"\",\n          sqlString: \"\",\n          lastgroupby: \"\",\n          lastGroupByRqt: \"\"\n        });\n      }\n    };\n\n    _this.handleChangeSQL = function (event) {\n      _this.setState({\n        inputSQl: event.target.value\n      });\n    };\n\n    _this._handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        _this.setState({\n          sqlString: _this.state.sqlString + ' ' + _this.state.inputSQl,\n          inputSQl: \"\"\n        });\n      }\n    };\n\n    _this.columnNamesChanged = function (newItems) {\n      _this.setState({\n        firstSQL: \"select \" + newItems.toString(),\n        lastgroupby: \" GroupBy \" + newItems.toString() // firstSQL:this.state.firstSQL+','+newItems\n        // fruits: newFruits\n\n      });\n    };\n\n    _this.state = {\n      sqlString: '',\n      openSelect: false,\n      opencombine: false,\n      firstSQL: \"select \",\n      inputSQl: \"\",\n      listNodesId: [],\n      finalRqt: [],\n      finalSQL: \"\",\n      lastgroupby: [],\n      lastGroupByRqt: \"\",\n      openGroupBy: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      axios.get(\"http://localhost:9000/test3/{path}\").then(function (res) {\n        var s = res.data; // console.log(s);   \n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          openSelect = _this$state.openSelect,\n          openGroupBy = _this$state.openGroupBy,\n          openCombine = _this$state.openCombine;\n      var sentenceSQL = this.state.sqlString;\n      var arrayop = listSQL.concat(_toConsumableArray(this.getColumns()));\n      var groupByopArray = listGroupBy.concat();\n      this.getColumns().map(function (item, i) {\n        groupByopArray.push('(' + item + ')');\n      });\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        open: openSelect,\n        onClose: this.onCloseSelectModal,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(CheckboxGroup, {\n        checkboxDepth: 2 // This is needed to optimize the checkbox group\n        ,\n        name: \"fruits\",\n        value: this.state.columnNames,\n        onChange: this.columnNamesChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, this.getColumns().map(function (item, i) {\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }), \" \", item);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, arrayop.map(function (item) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.addSQL({\n              item: item\n            });\n          },\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.inputSQl,\n        onChange: this.handleChangeSQL.bind(this),\n        onKeyPress: this._handleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, sentenceSQL)), React.createElement(Modal, {\n        open: openGroupBy,\n        onClose: this.onCloseGroupBy,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(CheckboxGroup, {\n        checkboxDepth: 2 // This is needed to optimize the checkbox group\n        ,\n        name: \"fruits\",\n        value: this.state.columnNames,\n        onChange: this.columnNamesChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, this.getColumns().map(function (item, i) {\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }), \" \", item);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, groupByopArray.map(function (item) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.addSQL({\n              item: item\n            });\n          },\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          },\n          __self: this\n        }, item);\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, this.state.firstSQL + this.state.sqlString)), React.createElement(Modal, {\n        open: openCombine,\n        onClose: this.onCloseCombine,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(CheckboxGroup, {\n        checkboxDepth: 2 // This is needed to optimize the checkbox group\n        ,\n        name: \"fruits\",\n        value: this.state.columnNames,\n        onChange: this.columnNamesChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, this.getColumns().map(function (item, i) {\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        }), \" \", item);\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, groupByopArray.map(function (item) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.addSQL({\n              item: item\n            });\n          },\n          value: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 349\n          },\n          __self: this\n        }, item);\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, this.state.firstSQL + this.state.sqlString)), React.createElement(\"button\", {\n        id: \"configureSelect\",\n        hidden: \"hidden\",\n        onClick: this.onOpenSelectModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"Configure Select\"), React.createElement(\"button\", {\n        id: \"configureGroupBy\",\n        hidden: \"hidden\",\n        onClick: this.onOpenGroupByModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, \" Configure GroupBy\"), React.createElement(\"button\", {\n        id: \"configureCombine\",\n        hidden: \"hidden\",\n        onClick: this.onOpenCombineModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, \" Configure Combine\"), React.createElement(\"input\", {\n        type: \"file\",\n        label: \"upload\",\n        onChange: this.fileInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"Select\"), React.createElement(\"button\", {\n        onClick: this.addCombine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, \"Combine\"), React.createElement(\"button\", {\n        onClick: this.addGroupBy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, \"GroupBy\"), React.createElement(SRD.DiagramWidget, {\n        diagramEngine: engine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 372\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/ibtihel/Desktop/berexia/reactapp/src/index.js"],"names":["React","Component","ReactDOM","SRD","Modal","axios","Checkbox","CheckboxGroup","require","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setDiagramModel","str","listSQL","listGroupBy","App","props","path","fileInput","e","file","target","files","newNode","DefaultNodeModel","name","addOutPort","addNode","forceUpdate","addSelect","newNode1","addInPort","console","log","addListener","selectionChanged","document","getElementById","style","display","addSQL","item","setState","sqlString","state","addCombine","addGroupBy","getColumns","newstr","split","onOpenGroupByModal","openGroupBy","onOpenSelectModal","openSelect","onOpenCombineModal","opencombine","onCloseSelectModal","Object","keys","links","map","i","listNodesId","sourcePort","parent","id","targetPort","finalSQL","firstSQL","finalRqt","onCloseGroupBy","lastGroupByRqt","lastgroupby","handleChangeSQL","event","inputSQl","value","_handleKeyPress","key","columnNamesChanged","newItems","toString","get","then","res","s","data","openCombine","sentenceSQL","arrayop","groupByopArray","push","columnNames","bind","onCloseCombine","rootElement","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,sBAArB;AACA,OAAO,cAAP;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,aAAlB,QAAsC,sBAAtC;;AAEAC,OAAO,CAAC,yCAAD,CAAP;;AAEA,IAAIC,MAAM,GAAG,IAAIN,GAAG,CAACO,aAAR,EAAb;AACAD,MAAM,CAACE,uBAAP,G,CAEA;;AACA,IAAIC,KAAK,GAAG,IAAIT,GAAG,CAACU,YAAR,EAAZ,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AACAJ,MAAM,CAACK,eAAP,CAAuBF,KAAvB,E,CACA;AACA;;AAEA,IAAMG,GAAG,GAAC,yBAAV;AACA,IAAMC,OAAO,GAAC,CAAC,KAAD,EAAO,IAAP,EAAY,OAAZ,EAAoB,KAApB,EAA0B,MAA1B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,IAAzC,EAA8C,GAA9C,EAAkD,IAAlD,EAAuD,IAAvD,EAA4D,KAA5D,EAAkE,KAAlE,EAAwE,KAAxE,EAA8E,GAA9E,EAAkF,GAAlF,EAAsF,GAAtF,EAA0F,GAA1F,EAA8F,GAA9F,EAAkG,GAAlG,CAAd;AACA,IAAMC,WAAW,GAAC,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,OAAnB,EAA2B,GAA3B,CAAlB;;IACMC,G;;;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AADiB,UAgBpBC,IAhBoB,GAgBf,qBAhBe;;AAAA,UAmBnBC,SAnBmB,GAmBP,UAAAC,CAAC,EAAI;AACf,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,OAAO,GAAG,IAAIvB,GAAG,CAACwB,gBAAR,CAAyBJ,IAAI,CAACK,IAA9B,EAAoC,MAApC,CAAhB;AACAF,MAAAA,OAAO,CAACG,UAAR,CAAmB,KAAnB;AACAjB,MAAAA,KAAK,CAACkB,OAAN,CAAcJ,OAAd;;AAEA,YAAKK,WAAL;AAMA;;;;;;;;;;;;;;AAcD,KA7CkB;;AAAA,UA6DnBC,SA7DmB,GA6DP,YAAM;AAChB,UAAMC,QAAQ,GAAG,IAAI9B,GAAG,CAACwB,gBAAR,CAAyB,QAAzB,EAAmC,OAAnC,CAAjB;AACAM,MAAAA,QAAQ,CAACJ,UAAT,CAAoB,KAApB;AACAI,MAAAA,QAAQ,CAACC,SAAT,CAAmB,IAAnB;AACAtB,MAAAA,KAAK,CAACkB,OAAN,CAAcG,QAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,YAAKF,WAAL,GANgB,CAShB;AAGA;AACA;AAIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGF;;;AAGIE,MAAAA,QAAQ,CAACI,WAAT,CAAqB;AACnBC,QAAAA,gBAAgB,EAAE,4BAAM;AACtBC,UAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,KAA5C,CAAkDC,OAAlD,GAA4D,MAA5D;AACAH,UAAAA,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CC,KAA3C,CAAiDC,OAAjD,GAA2D,OAA3D;AACD;AAJkB,OAArB;AAQD,KAtGkB;;AAAA,UAwGnBC,MAxGmB,GAwGV,UAACC,IAAD,EAAU;AACjBT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;;AACC,YAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAG,MAAKC,KAAL,CAAWD,SAAX,GAAsB,GAAtB,GAA2BF,IAAI,CAACA;AAA7C,OAAd;;AACDT,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKW,KAAL,CAAWD,SAAvB;AACD,KA5GkB;;AAAA,UA+GnBE,UA/GmB,GA+GN,YAAM;AACjB,UAAMtB,OAAO,GAAG,IAAIvB,GAAG,CAACwB,gBAAR,CAAyB,SAAzB,EAAoC,KAApC,CAAhB;AACAD,MAAAA,OAAO,CAACG,UAAR,CAAmB,KAAnB;AACAH,MAAAA,OAAO,CAACQ,SAAR,CAAkB,KAAlB;AACAR,MAAAA,OAAO,CAACQ,SAAR,CAAkB,KAAlB;AACAtB,MAAAA,KAAK,CAACkB,OAAN,CAAcJ,OAAd;;AACA,YAAKK,WAAL;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ;AACD,KAvHkB;;AAAA,UAwHnBqC,UAxHmB,GAwHN,YAAM;AACjB,UAAMvB,OAAO,GAAG,IAAIvB,GAAG,CAACwB,gBAAR,CAAyB,SAAzB,EAAoC,MAApC,CAAhB;AACAD,MAAAA,OAAO,CAACG,UAAR,CAAmB,KAAnB;AACAH,MAAAA,OAAO,CAACQ,SAAR,CAAkB,IAAlB;AACAtB,MAAAA,KAAK,CAACkB,OAAN,CAAcJ,OAAd;;AAEA,YAAKK,WAAL;;AAGAL,MAAAA,OAAO,CAACW,WAAR,CAAoB;AAClBC,QAAAA,gBAAgB,EAAE,4BAAM;AACtBC,UAAAA,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CC,KAA3C,CAAiDC,OAAjD,GAA2D,MAA3D;AACAH,UAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,KAA5C,CAAkDC,OAAlD,GAA4D,OAA5D;AACD;AAJiB,OAApB;AAMD,KAvIkB;;AAAA,UA8InBQ,UA9ImB,GA8IR,YAAK;AACd,UAAIC,MAAM,GAAGpC,GAAG,CAACqC,KAAJ,CAAU,GAAV,CAAb;AACA,aAAOD,MAAP;AACD,KAjJkB;;AAAA,UAsJjBE,kBAtJiB,GAsJG,YAAI;AACtB,YAAKR,QAAL,CAAc;AAACS,QAAAA,WAAW,EAAC;AAAb,OAAd;AACD,KAxJgB;;AAAA,UA0JnBC,iBA1JmB,GA0JC,YAAM;AACxB,YAAKV,QAAL,CAAc;AAAEW,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD,KA5JkB;;AAAA,UA8JnBC,kBA9JmB,GA8JE,YAAM;AACzB,YAAKZ,QAAL,CAAc;AAAEa,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD,KAhKkB;;AAAA,UAkKnBC,kBAlKmB,GAkKE,YAAM;AACzBC,MAAAA,MAAM,CAACC,IAAP,CAAYjD,KAAK,CAACkD,KAAlB,EAAyBC,GAAzB,CAA6B,UAACnB,IAAD,EAAOoB,CAAP;AAAA,eAC3B,MAAKnB,QAAL,CAAc;AAACoB,UAAAA,WAAW,EAAC,CAACrD,KAAK,CAACkD,KAAN,CAAYlB,IAAZ,EAAkBsB,UAAlB,CAA6BC,MAA7B,CAAoCC,EAArC,EAAwCxD,KAAK,CAACkD,KAAN,CAAYlB,IAAZ,EAAkByB,UAAlB,CAA6BF,MAA7B,CAAoCC,EAA5E;AAAb,SAAd,CAD2B;AAAA,OAA7B;;AAGA,YAAKvB,QAAL,CAAc;AAACyB,QAAAA,QAAQ,EAAC,MAAKvB,KAAL,CAAWwB,QAAX,GAAoB,MAAKxB,KAAL,CAAWD;AAAzC,OAAd;;AACA,UAAI,MAAKC,KAAL,CAAWuB,QAAf,EACA;AACA,cAAKzB,QAAL,CAAc;AAAC2B,UAAAA,QAAQ,qBAAK,MAAKzB,KAAL,CAAWyB,QAAhB,6BAA6B,MAAKzB,KAAL,CAAWkB,WAAxC,UAAoD,MAAKlB,KAAL,CAAWuB,QAA/D;AAAT,SAAd;;AACA,cAAKzB,QAAL,CAAc;AAACW,UAAAA,UAAU,EAAE;AAAb,SAAd;;AACA,cAAKX,QAAL,CAAc;AAACyB,UAAAA,QAAQ,EAAC,EAAV;AAAaxB,UAAAA,SAAS,EAAC;AAAvB,SAAd;AACC;AACF,KA7KkB;;AAAA,UA+KnB2B,cA/KmB,GA+KJ,YAAI;AACjBb,MAAAA,MAAM,CAACC,IAAP,CAAYjD,KAAK,CAACkD,KAAlB,EAAyBC,GAAzB,CAA6B,UAACnB,IAAD,EAAOoB,CAAP;AAAA,eAC3B,MAAKnB,QAAL,CAAc;AAACoB,UAAAA,WAAW,EAAC,CAACrD,KAAK,CAACkD,KAAN,CAAYlB,IAAZ,EAAkBsB,UAAlB,CAA6BC,MAA7B,CAAoCC,EAArC,EAAwCxD,KAAK,CAACkD,KAAN,CAAYlB,IAAZ,EAAkByB,UAAlB,CAA6BF,MAA7B,CAAoCC,EAA5E;AAAb,SAAd,CAD2B;AAAA,OAA7B;;AAGA,YAAKvB,QAAL,CAAc;AAAC6B,QAAAA,cAAc,EAAC,MAAK3B,KAAL,CAAWwB,QAAX,GAAoB,MAAKxB,KAAL,CAAWD,SAA/B,GAAyC,MAAKC,KAAL,CAAW4B;AAApE,OAAd;;AAEA,UAAI,MAAK5B,KAAL,CAAW2B,cAAf,EACA;AACE,cAAK7B,QAAL,CAAc;AAAC2B,UAAAA,QAAQ,EAAC,CAAC,MAAKzB,KAAL,CAAWyB,QAAZ,qBAAyB,MAAKzB,KAAL,CAAWkB,WAApC,UAAgD,MAAKlB,KAAL,CAAW2B,cAA3D;AAAV,SAAd;;AACA,cAAK7B,QAAL,CAAc;AAACS,UAAAA,WAAW,EAAC;AAAb,SAAd;;AACA,cAAKT,QAAL,CAAc;AAAC0B,UAAAA,QAAQ,EAAC,EAAV;AAAazB,UAAAA,SAAS,EAAC,EAAvB;AAA0B6B,UAAAA,WAAW,EAAC,EAAtC;AAAyCD,UAAAA,cAAc,EAAC;AAAxD,SAAd;AAED;AAEF,KA7LkB;;AAAA,UA+LnBE,eA/LmB,GA+LH,UAACC,KAAD,EAAS;AAEvB,YAAKhC,QAAL,CAAc;AAACiC,QAAAA,QAAQ,EAACD,KAAK,CAACrD,MAAN,CAAauD;AAAvB,OAAd;AAED,KAnMkB;;AAAA,UAqMnBC,eArMmB,GAqMD,UAAC1D,CAAD,EAAO;AAEvB,UAAIA,CAAC,CAAC2D,GAAF,KAAU,OAAd,EAAuB;AACrB,cAAKpC,QAAL,CAAc;AAACC,UAAAA,SAAS,EAAC,MAAKC,KAAL,CAAWD,SAAX,GAAqB,GAArB,GAAyB,MAAKC,KAAL,CAAW+B,QAA/C;AAAwDA,UAAAA,QAAQ,EAAC;AAAjE,SAAd;AACD;AACF,KA1MkB;;AAAA,UA6MnBI,kBA7MmB,GA6ME,UAACC,QAAD,EAAc;AAGjC,YAAKtC,QAAL,CAAc;AACZ0B,QAAAA,QAAQ,EAAE,YAAWY,QAAQ,CAACC,QAAT,EADT;AAEZT,QAAAA,WAAW,EAAC,cAAYQ,QAAQ,CAACC,QAAT,EAFZ,CAGZ;AACA;;AAJY,OAAd;AAMD,KAtNkB;;AAEjB,UAAKrC,KAAL,GAAa;AAACD,MAAAA,SAAS,EAAC,EAAX;AACZU,MAAAA,UAAU,EAAC,KADC;AAEbE,MAAAA,WAAW,EAAC,KAFC;AAGba,MAAAA,QAAQ,EAAC,SAHI;AAIZO,MAAAA,QAAQ,EAAC,EAJG;AAKZb,MAAAA,WAAW,EAAC,EALA;AAMfO,MAAAA,QAAQ,EAAC,EANM;AAOfF,MAAAA,QAAQ,EAAC,EAPM;AAQfK,MAAAA,WAAW,EAAC,EARG;AASfD,MAAAA,cAAc,EAAC,EATA;AAUjBpB,MAAAA,WAAW,EAAC;AAVK,KAAb;AAFiB;AAclB;;;;wCAmCmB;AAClBjD,MAAAA,KAAK,CAACgF,GAAN,uCACGC,IADH,CACQ,UAAAC,GAAG,EAAI;AACX,YAAMC,CAAC,GAAGD,GAAG,CAACE,IAAd,CADW,CAEnB;AACI,OAJA;AAKD;;;6BAkKQ;AAAA;;AAAA,wBACwC,KAAK1C,KAD7C;AAAA,UACCS,UADD,eACCA,UADD;AAAA,UACYF,WADZ,eACYA,WADZ;AAAA,UACwBoC,WADxB,eACwBA,WADxB;AAEP,UAAIC,WAAW,GAAG,KAAK5C,KAAL,CAAWD,SAA7B;AACA,UAAI8C,OAAO,GAAO5E,OAAP,2BAAmB,KAAKkC,UAAL,EAAnB,EAAX;AACA,UAAI2C,cAAc,GAAO5E,WAAP,SAAlB;AACA,WAAKiC,UAAL,GAAkBa,GAAlB,CAAsB,UAACnB,IAAD,EAAMoB,CAAN,EAAU;AAC9B6B,QAAAA,cAAc,CAACC,IAAf,CAAoB,MAAIlD,IAAJ,GAAS,GAA7B;AACD,OAFD;AAGA,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAEY,UAAb;AAAyB,QAAA,OAAO,EAAE,KAAKG,kBAAvC;AAA2D,QAAA,MAAM,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AACE,QAAA,aAAa,EAAE,CADjB,CACoB;AADpB;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWgD,WAHpB;AAIE,QAAA,QAAQ,EAAE,KAAKb,kBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKA,KAAKhC,UAAL,GAAkBa,GAAlB,CAAsB,UAASnB,IAAT,EAAeoB,CAAf,EAAiB;AACtC,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAEpB,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,OAAiCA,IAAjC,CAAP;AAAsD,OADvD,CALA,CADF,CAHQ,EAeN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEDgD,OAAO,CAAC7B,GAAR,CAAY,UAACnB,IAAD;AAAA,eACR;AAAS,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACD,MAAL,CAAY;AAACC,cAAAA,IAAI,EAAJA;AAAD,aAAZ,CAAN;AAAA,WAAlB;AAA6C,UAAA,KAAK,EAAEA,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2DA,IAA3D,CADQ;AAAA,OAAZ,CAFC,EAMA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAKG,KAAL,CAAW+B,QAArC;AAA+C,QAAA,QAAQ,EAAE,KAAKF,eAAL,CAAqBoB,IAArB,CAA0B,IAA1B,CAAzD;AACA,QAAA,UAAU,EAAE,KAAKhB,eADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANA,CAfM,EAwBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACHW,WADG,CAxBE,CADF,EAkCG,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAErC,WAAb;AAA0B,QAAA,OAAO,EAAE,KAAKmB,cAAxC;AAAwD,QAAA,MAAM,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,oBAAC,aAAD;AACE,QAAA,aAAa,EAAE,CADjB,CACoB;AADpB;AAEE,QAAA,IAAI,EAAC,QAFP;AAIE,QAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWgD,WAJpB;AAKE,QAAA,QAAQ,EAAE,KAAKb,kBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQC,KAAKhC,UAAL,GAAkBa,GAAlB,CAAsB,UAASnB,IAAT,EAAeoB,CAAf,EAAiB;AAEvC,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAEpB,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,OAAiCA,IAAjC,CAAP;AAAsD,OAFtD,CARD,CADI,CAFG,EAgBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEEiD,cAAc,CAAC9B,GAAf,CAAmB,UAACnB,IAAD;AAAA,eAChB;AAAS,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACD,MAAL,CAAY;AAACC,cAAAA,IAAI,EAAJA;AAAD,aAAZ,CAAN;AAAA,WAAlB;AAA6C,UAAA,KAAK,EAAEA,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2DA,IAA3D,CADgB;AAAA,OAAnB,CAFF,CAhBS,EAuBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKG,KAAL,CAAWwB,QAAX,GAAoB,KAAKxB,KAAL,CAAWD,SAArC,CAvBO,CAlCH,EA6DI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE4C,WAAb;AAA0B,QAAA,OAAO,EAAE,KAAKO,cAAxC;AAAwD,QAAA,MAAM,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,aAAD;AACA,QAAA,aAAa,EAAE,CADf,CACkB;AADlB;AAEA,QAAA,IAAI,EAAC,QAFL;AAIA,QAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWgD,WAJlB;AAKA,QAAA,QAAQ,EAAE,KAAKb,kBALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQA,KAAKhC,UAAL,GAAkBa,GAAlB,CAAsB,UAASnB,IAAT,EAAeoB,CAAf,EAAiB;AAEvC,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAEpB,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,OAAiCA,IAAjC,CAAP;AAAsD,OAFtD,CARA,CADA,CAFU,EAgBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEAiD,cAAc,CAAC9B,GAAf,CAAmB,UAACnB,IAAD;AAAA,eACnB;AAAS,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACD,MAAL,CAAY;AAACC,cAAAA,IAAI,EAAJA;AAAD,aAAZ,CAAN;AAAA,WAAlB;AAA6C,UAAA,KAAK,EAAEA,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2DA,IAA3D,CADmB;AAAA,OAAnB,CAFA,CAhBU,EAuBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKG,KAAL,CAAWwB,QAAX,GAAoB,KAAKxB,KAAL,CAAWD,SAArC,CAvBU,CA7DJ,EAuFE;AAAQ,QAAA,EAAE,EAAC,iBAAX;AAA6B,QAAA,MAAM,EAAC,QAApC;AAA6C,QAAA,OAAO,EAAE,KAAKS,iBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAvFF,EAwFE;AAAQ,QAAA,EAAE,EAAC,kBAAX;AAA8B,QAAA,MAAM,EAAC,QAArC;AAA8C,QAAA,OAAO,EAAE,KAAKF,kBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAxFF,EAyFE;AAAQ,QAAA,EAAE,EAAC,kBAAX;AAA8B,QAAA,MAAM,EAAC,QAArC;AAA8C,QAAA,OAAO,EAAE,KAAKI,kBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAzFF,EA2FE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAC,QAAzB;AAAkC,QAAA,QAAQ,EAAE,KAAKpC,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3FF,EA4FE;AAAQ,QAAA,OAAO,EAAE,KAAKW,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA5FF,EA6FE;AAAQ,QAAA,OAAO,EAAE,KAAKgB,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA7FF,EA8FE;AAAQ,QAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA9FF,EAgGE,oBAAC,GAAD,CAAK,aAAL;AAAmB,QAAA,aAAa,EAAExC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhGF,CADF;AAoGD;;;;EAvUeR,S;;AA0UlB,IAAMiG,WAAW,GAAG3D,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAtC,QAAQ,CAACiG,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBD,WAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nimport {Checkbox, CheckboxGroup} from 'react-checkbox-group';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n// 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n\n// 5) link the ports\n//let link1 = port1.link(port2);\n\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\n// console.log(model);\n// console.log(engine);\n\nconst str=\"aze,dazad,dscwxc,fdsfsd\"\nconst listSQL=['and','or','where','not','like','>','<','<>','=','<=','>=','AVG','MIN','MAX','(',')','+','-','*','/']\nconst listGroupBy=['AVG','MIN','MAX','FIRST',',']\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {sqlString:''\n    ,openSelect:false,\n    opencombine:false,\n    firstSQL:\"select \"\n    ,inputSQl:\"\"\n    ,listNodesId:[],\n  finalRqt:[],\n  finalSQL:\"\",\n  lastgroupby:[],\n  lastGroupByRqt:\"\",\nopenGroupBy:false };\n\n  }\n\n path=\"EA_result_1351.xlsx\";\n\n\n  fileInput = e => {\n    const file = e.target.files[0];\n    const newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n    newNode.addOutPort(\"out\");\n    model.addNode(newNode);\n\n    this.forceUpdate();\n\n    \n\n\n  \n    /*  this.componentDidMount()\n    {\n      fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n        res.json()\n      }).then(res=>{\n        this.setState({\n          columns: res\n        }).catch(error=>{\n          console.log(error)\n        })\n      })    \n    }\n  */\n  \n  };\n\n  \n  \n  componentDidMount() {\n    axios.get(`http://localhost:9000/test3/{path}`)\n      .then(res => {\n        const s = res.data;\n// console.log(s);   \n   })\n  }\n\n\n\n    \n\n  addSelect = () => {\n    const newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n    newNode1.addOutPort(\"out\");\n    newNode1.addInPort(\"in\");\n    model.addNode(newNode1);\n    console.log(newNode1)\n    this.forceUpdate(); \n\n\n    //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n\n  \n    // console.log(\"hiiii\");\n    // console.log(model.getSelectedItems());\n\n\n\n  //   model.addListener({\n  //     linksUpdated: e => {  \n  //       console.log(\"udated!!\") \n  //       console.log(e)\n  //       if( (e.link.sourcePort!=null)&&(e.link.targetPort!=null)){\n  //       console.log(\"*************************\")\n  //       if(e.link.targetPort.parent.id!=e.link.sourcePort.parent.id)\n  //   {\n  //     console.log(\"dsfsdf\")\n  //     this.setState({listNodesId:[e.link.sourcePort.parent.id,e.link.targetPort.parent.id]})   }}\n  // }\n  \n      \n// });\n\n\n    newNode1.addListener({\n      selectionChanged: () => {\n        document.getElementById('configureGroupBy').style.display = 'none';\n        document.getElementById('configureSelect').style.display = 'block';\n      }\n        });\n\n\n  };\n\n  addSQL = (item) => {\n    console.log(item)\n     this.setState({sqlString:  this.state.sqlString +' '+ item.item})\n    console.log(this.state.sqlString)\n  };\n\n\n  addCombine = () => {\n    const newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in1\");\n    newNode.addInPort(\"in2\");\n    model.addNode(newNode);\n    this.forceUpdate();\n    console.log(model);\n  };\n  addGroupBy = () => {\n    const newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in\");\n    model.addNode(newNode);\n\n    this.forceUpdate();\n\n\n    newNode.addListener({\n      selectionChanged: () => {\n        document.getElementById('configureSelect').style.display = 'none';\n        document.getElementById('configureGroupBy').style.display = 'block';\n      }\n        });\n  };\n\n  // state = {\n  //   open: false,\n  // };\n\n\n  getColumns=()=> {\n    var newstr = str.split(',');\n    return newstr\n  }\n\n \n    //console.log(model.links)\n  \n    onOpenGroupByModal =()=>{\n      this.setState({openGroupBy:true})\n    }\n\n  onOpenSelectModal = () => {\n    this.setState({ openSelect: true });\n  };\n  \n  onOpenCombineModal = () => {\n    this.setState({ opencombine: true });\n  };\n\n  onCloseSelectModal = () => {\n    Object.keys(model.links).map((item, i) => (\n      this.setState({listNodesId:[model.links[item].sourcePort.parent.id,model.links[item].targetPort.parent.id]})  \n    ))\n    this.setState({finalSQL:this.state.firstSQL+this.state.sqlString });\n    if (this.state.finalSQL)\n    {\n    this.setState({finalRqt:[...this.state.finalRqt,[...this.state.listNodesId,this.state.finalSQL]]})\n    this.setState({openSelect: false})\n    this.setState({finalSQL:\"\",sqlString:\"\"})\n    }\n  };\n\n  onCloseGroupBy=()=>{\n    Object.keys(model.links).map((item, i) => (\n      this.setState({listNodesId:[model.links[item].sourcePort.parent.id,model.links[item].targetPort.parent.id]})  \n    ))\n    this.setState({lastGroupByRqt:this.state.firstSQL+this.state.sqlString+this.state.lastgroupby})\n\n    if (this.state.lastGroupByRqt)\n    {\n      this.setState({finalRqt:[this.state.finalRqt,[...this.state.listNodesId,this.state.lastGroupByRqt]]})\n      this.setState({openGroupBy:false})\n      this.setState({firstSQL:\"\",sqlString:\"\",lastgroupby:\"\",lastGroupByRqt:\"\"})\n\n    }\n   \n  }\n\n  handleChangeSQL=(event)=>{\n    \n    this.setState({inputSQl:event.target.value})\n\n  }\n\n  _handleKeyPress = (e) => {\n    \n    if (e.key === 'Enter') {\n      this.setState({sqlString:this.state.sqlString+' '+this.state.inputSQl,inputSQl:\"\"})\n    }\n  }\n   \n\n  columnNamesChanged = (newItems) => {\n    \n\n    this.setState({\n      firstSQL: \"select \"+ newItems.toString(),\n      lastgroupby:\" GroupBy \"+newItems.toString()\n      // firstSQL:this.state.firstSQL+','+newItems\n      // fruits: newFruits\n    });\n  }\n\n\n  render() {\n    const { openSelect,openGroupBy,openCombine } = this.state;\n    var sentenceSQL = this.state.sqlString\n    var arrayop = [...listSQL, ...this.getColumns()]\n    var groupByopArray = [...listGroupBy]\n    this.getColumns().map((item,i)=>{\n      groupByopArray.push('('+item+')')\n    })\n    return (\n      <div className=\"App\">\n        <Modal open={openSelect} onClose={this.onCloseSelectModal} center>\n           \n           \n<div>\n  <CheckboxGroup\n    checkboxDepth={2} // This is needed to optimize the checkbox group\n    name=\"fruits\"\n    value={this.state.columnNames}\n    onChange={this.columnNamesChanged}>\n {this.getColumns().map(function(item, i){\n   return <label><Checkbox value={item}/> {item}</label>})}\n  </CheckboxGroup>\n  </div>\n\n\n  <div>\n    {\n arrayop.map((item)=>(\n     <button  onClick={() => this.addSQL({item})} value={item}>{item}</button>\n  ))\n}\n  <input type='text' value={this.state.inputSQl} onChange={this.handleChangeSQL.bind(this)}\n  onKeyPress={this._handleKeyPress} />\n  </div>\n      <div>\n  {sentenceSQL}\n     </div>\n          \n\n        </Modal>    \n  \n\n\n         <Modal open={openGroupBy} onClose={this.onCloseGroupBy} center>\n\n      <div>\n  <CheckboxGroup\n    checkboxDepth={2} // This is needed to optimize the checkbox group\n    name=\"fruits\"\n    \n    value={this.state.columnNames}\n    onChange={this.columnNamesChanged}\n>\n {\n   this.getColumns().map(function(item, i){\n   \n   return <label><Checkbox value={item}/> {item}</label>})}\n  </CheckboxGroup>\n  </div>\n<div>\n{\n  groupByopArray.map((item)=>(\n     <button  onClick={() => this.addSQL({item})} value={item}>{item}</button>\n  ))\n}\n  </div>\n  <div>{this.state.firstSQL+this.state.sqlString}</div>\n         </Modal> \n\n\n          <Modal open={openCombine} onClose={this.onCloseCombine} center>\n\n<div>\n<CheckboxGroup\ncheckboxDepth={2} // This is needed to optimize the checkbox group\nname=\"fruits\"\n\nvalue={this.state.columnNames}\nonChange={this.columnNamesChanged}\n>\n{\nthis.getColumns().map(function(item, i){\n\nreturn <label><Checkbox value={item}/> {item}</label>})}\n</CheckboxGroup>\n</div>\n<div>\n{\ngroupByopArray.map((item)=>(\n<button  onClick={() => this.addSQL({item})} value={item}>{item}</button>\n))\n}\n</div>\n<div>{this.state.firstSQL+this.state.sqlString}</div>\n   </Modal> \n    \n        <button id=\"configureSelect\" hidden=\"hidden\" onClick={this.onOpenSelectModal} >Configure Select</button>\n        <button id=\"configureGroupBy\" hidden=\"hidden\" onClick={this.onOpenGroupByModal}> Configure GroupBy</button>\n        <button id=\"configureCombine\" hidden=\"hidden\" onClick={this.onOpenCombineModal}> Configure Combine</button>\n\n        <input type=\"file\" label=\"upload\" onChange={this.fileInput} />\n        <button onClick={this.addSelect}>Select</button>\n        <button onClick={this.addCombine}>Combine</button>\n        <button onClick={this.addGroupBy}>GroupBy</button>\n\n        <SRD.DiagramWidget diagramEngine={engine} />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}