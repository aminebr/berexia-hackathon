{"ast":null,"code":"import _classCallCheck from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ibtihel/Desktop/berexia/reactapp/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories(); // 2) setup the diagram model\n\nvar model = new SRD.DiagramModel(); // 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n// 5) link the ports\n//let link1 = port1.link(port2);\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n// 7) load model into engine\n\nengine.setDiagramModel(model);\nconsole.log(model);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fileInput = function (e) {\n      var file = e.target.files[0];\n      var newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n      newNode.addOutPort(\"out\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n    };\n\n    _this.addSelect = function () {\n      var newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n      newNode1.addOutPort(\"out\");\n      newNode1.addInPort(\"in\");\n      model.addNode(newNode1);\n\n      _this.forceUpdate();\n\n      console.log(newNode1);\n      console.log(model);\n      var container = document.querySelector('.node srd-node');\n      var id = model.getNode(newNode1).getID;\n      var node = container.querySelectorAll(\"div[data-nodeid='id']\");\n      node.addListener({\n        selectionChanged: function selectionChanged() {\n          _this.onOpenModal();\n        }\n      });\n    };\n\n    _this.addCombine = function () {\n      var newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in1\");\n      newNode.addInPort(\"in2\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n\n      console.log(model);\n    };\n\n    _this.addGroupBy = function () {\n      var newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n    };\n\n    _this.state = {\n      open: false\n    };\n\n    _this.onOpenModal = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.onCloseModal = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        open: open,\n        onClose: this.onCloseModal,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Simple centered modal\")), \"        \", React.createElement(\"input\", {\n        type: \"file\",\n        label: \"upload\",\n        onChange: this.fileInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Select\"), React.createElement(\"button\", {\n        onClick: this.addCombine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Combine\"), React.createElement(\"button\", {\n        onClick: this.addGroupBy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"GroupBy\"), React.createElement(SRD.DiagramWidget, {\n        diagramEngine: engine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/ibtihel/Desktop/berexia/reactapp/src/index.js"],"names":["React","Component","ReactDOM","SRD","Modal","require","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setDiagramModel","console","log","App","fileInput","e","file","target","files","newNode","DefaultNodeModel","name","addOutPort","addNode","forceUpdate","addSelect","newNode1","addInPort","container","document","querySelector","id","getNode","getID","node","querySelectorAll","addListener","selectionChanged","onOpenModal","addCombine","addGroupBy","state","open","setState","onCloseModal","rootElement","getElementById","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n// 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n\n// 5) link the ports\n//let link1 = port1.link(port2);\n\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\nconsole.log(model);\n\nclass App extends Component {\n  fileInput = e => {\n    const file = e.target.files[0];\n    const newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n    newNode.addOutPort(\"out\");\n    model.addNode(newNode);\n    this.forceUpdate();\n  };\n\n  addSelect = () => {\n    const newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n    newNode1.addOutPort(\"out\");\n    newNode1.addInPort(\"in\");\n    model.addNode(newNode1);\n    this.forceUpdate();\n    console.log(newNode1);\n    console.log(model);\n    var container = document.querySelector('.node srd-node');\n    var id=model.getNode(newNode1).getID\n    var node = container.querySelectorAll(\"div[data-nodeid='id']\");\n    node.addListener({\n      selectionChanged: () => {\n        this.onOpenModal();\n      }\n    });\n  };\n\n  addCombine = () => {\n    const newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in1\");\n    newNode.addInPort(\"in2\");\n    model.addNode(newNode);\n    this.forceUpdate();\n    console.log(model);\n  };\n  addGroupBy = () => {\n    const newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in\");\n    model.addNode(newNode);\n\n    this.forceUpdate();\n  };\n\n  state = {\n    open: false,\n  };\n\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { open } = this.state;\n    return (\n      <div className=\"App\">\n        <Modal open={open} onClose={this.onCloseModal} center>\n          <h2>Simple centered modal</h2>\n        </Modal>        <input type=\"file\" label=\"upload\" onChange={this.fileInput} />\n        <button onClick={this.addSelect}>Select</button>\n        <button onClick={this.addCombine}>Combine</button>\n        <button onClick={this.addGroupBy}>GroupBy</button>\n\n        <SRD.DiagramWidget diagramEngine={engine} />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}