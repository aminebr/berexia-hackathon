{"ast":null,"code":"import _classCallCheck from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ibtihel/Desktop/berexia/reactapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ibtihel/Desktop/berexia/reactapp/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories(); // 2) setup the diagram model\n\nvar model = new SRD.DiagramModel(); // 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n// 5) link the ports\n//let link1 = port1.link(port2);\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n// 7) load model into engine\n\nengine.setDiagramModel(model);\nconsole.log(model);\nconsole.log(engine);\nvar str = \"aze,dazad,dscwxc,fdsfsd\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.path = \"EA_result_1351.xlsx\";\n\n    _this.fileInput = function (e) {\n      var file = e.target.files[0];\n      var newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n      newNode.addOutPort(\"out\");\n      model.addNode(newNode);\n      console.log(newNode.name);\n\n      _this.forceUpdate();\n      /*  this.componentDidMount()\n      {\n        fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n          res.json()\n        }).then(res=>{\n          this.setState({\n            columns: res\n          }).catch(error=>{\n            console.log(error)\n          })\n        })    \n      }\n      */\n\n    };\n\n    _this.addSelect = function () {\n      var newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n      newNode1.addOutPort(\"out\");\n      newNode1.addInPort(\"in\");\n      model.addNode(newNode1);\n      console.log(newNode1);\n\n      _this.forceUpdate();\n\n      console.log(model); //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n\n      console.log(\"hiiii\");\n      console.log(model.getSelectedItems());\n      newNode1.addListener({\n        selectionChanged: function selectionChanged() {\n          document.getElementById('configure').style.display = 'block';\n        }\n      });\n    };\n\n    _this.addCombine = function () {\n      var newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in1\");\n      newNode.addInPort(\"in2\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n\n      console.log(model);\n    };\n\n    _this.addGroupBy = function () {\n      var newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n      newNode.addOutPort(\"out\");\n      newNode.addInPort(\"in\");\n      model.addNode(newNode);\n\n      _this.forceUpdate();\n    };\n\n    _this.state = {\n      open: false\n    };\n\n    _this.getColumns = function () {\n      var newstr = str.split(',');\n      return newstr;\n    };\n\n    _this.onOpenModal = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.onCloseModal = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      axios.get(\"http://localhost:9000/test3/{path}\").then(function (res) {\n        var s = res.data;\n        console.log(s);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        open: open,\n        onClose: this.onCloseModal,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Simple centered modal\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, this.getColumns().map(function (item, i) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(CheckBox, {\n          value: item,\n          id: 'item' + i,\n          onChange: this.changeEvent.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          htmlFor: 'item' + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, item));\n      }))), React.createElement(\"button\", {\n        id: \"configure\",\n        hidden: \"hidden\",\n        onClick: this.onOpenModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Configure\"), React.createElement(\"input\", {\n        type: \"file\",\n        label: \"upload\",\n        onChange: this.fileInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Select\"), React.createElement(\"button\", {\n        onClick: this.addCombine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Combine\"), React.createElement(\"button\", {\n        onClick: this.addGroupBy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"GroupBy\"), React.createElement(SRD.DiagramWidget, {\n        diagramEngine: engine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 179\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/ibtihel/Desktop/berexia/reactapp/src/index.js"],"names":["React","Component","ReactDOM","SRD","Modal","axios","require","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setDiagramModel","console","log","str","App","path","fileInput","e","file","target","files","newNode","DefaultNodeModel","name","addOutPort","addNode","forceUpdate","addSelect","newNode1","addInPort","getSelectedItems","addListener","selectionChanged","document","getElementById","style","display","addCombine","addGroupBy","state","open","getColumns","newstr","split","onOpenModal","setState","onCloseModal","get","then","res","s","data","map","item","i","changeEvent","bind","rootElement","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as SRD from \"storm-react-diagrams\";\nimport \"./styles.css\";\nimport Modal from 'react-responsive-modal';\nimport axios from 'axios';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n// 3) create a default node\n//var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n//let port1 = node1.addOutPort(\"Out\");\n//node1.setPosition(100, 100);\n\n// 4) create another default node\n//var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n//let port2 = node2.addInPort(\"In\");\n//node2.setPosition(400, 100);\n\n// 5) link the ports\n//let link1 = port1.link(port2);\n\n// 6) add the models to the root graph\n//model.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\nconsole.log(model);\nconsole.log(engine);\n\nconst str=\"aze,dazad,dscwxc,fdsfsd\"\n\n\nclass App extends Component {\n  \n path=\"EA_result_1351.xlsx\";\n\n\n  fileInput = e => {\n    const file = e.target.files[0];\n    const newNode = new SRD.DefaultNodeModel(file.name, \"blue\");\n    newNode.addOutPort(\"out\");\n    model.addNode(newNode);\n    console.log(newNode.name);\n    this.forceUpdate();\n\n    \n\n\n  \n    /*  this.componentDidMount()\n    {\n      fetch('http://localhost:9000/findallcolumns/{file.name}').then(res=>{\n        res.json()\n      }).then(res=>{\n        this.setState({\n          columns: res\n        }).catch(error=>{\n          console.log(error)\n        })\n      })    \n    }\n  */\n  \n  };\n\n  \n  \n  componentDidMount() {\n    axios.get(`http://localhost:9000/test3/{path}`)\n      .then(res => {\n        const s = res.data;\nconsole.log(s);      })\n  }\n\n\n\n    \n\n  addSelect = () => {\n    const newNode1 = new SRD.DefaultNodeModel(\"Select\", \"green\");\n    newNode1.addOutPort(\"out\");\n    newNode1.addInPort(\"in\");\n    model.addNode(newNode1);\n    console.log(newNode1)\n    this.forceUpdate(); \n     console.log(model);\n\n    //  newNode1.addListener({selectionChanged : console.log(\"******\")});\n\n  \n    console.log(\"hiiii\");\n    console.log(model.getSelectedItems());\n\n\n\n\n\n    newNode1.addListener({\n      selectionChanged: () => {\n        document.getElementById('configure').style.display = 'block';\n      }\n    });\n  };\n\n  addCombine = () => {\n    const newNode = new SRD.DefaultNodeModel(\"Combine\", \"red\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in1\");\n    newNode.addInPort(\"in2\");\n    model.addNode(newNode);\n    this.forceUpdate();\n    console.log(model);\n  };\n  addGroupBy = () => {\n    const newNode = new SRD.DefaultNodeModel(\"GroupBy\", \"pink\");\n    newNode.addOutPort(\"out\");\n    newNode.addInPort(\"in\");\n    model.addNode(newNode);\n\n\n    \n    this.forceUpdate();\n  };\n\n  state = {\n    open: false,\n  };\n\n\n  getColumns=()=> {\n    var newstr = str.split(',');\n    return newstr\n  }\n\n\n\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n\n\n\n  render() {\n    const { open } = this.state;\n    return (\n      <div className=\"App\">\n        <Modal open={open} onClose={this.onCloseModal} center>\n          <h2>Simple centered modal</h2>\n           \n          <form>\n            {this.getColumns().map(function(item, i){\n           return (<div><CheckBox value={item} id={'item' + i} onChange={this.changeEvent.bind(this)} /><label htmlFor={'item' + i}>{item}</label></div>)})}\n            </form>\n\n        </Modal>        \n       \n        <button id=\"configure\" hidden=\"hidden\" onClick={this.onOpenModal} >Configure</button>\n        <input type=\"file\" label=\"upload\" onChange={this.fileInput} />\n        <button onClick={this.addSelect}>Select</button>\n        <button onClick={this.addCombine}>Combine</button>\n        <button onClick={this.addGroupBy}>GroupBy</button>\n\n        <SRD.DiagramWidget diagramEngine={engine} />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}